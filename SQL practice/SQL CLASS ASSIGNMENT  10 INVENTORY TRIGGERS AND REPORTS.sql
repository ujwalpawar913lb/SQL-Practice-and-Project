--Lets make some triggegers for automation of inventory system.
--1) The stock should be greater than order quantity then only accept the order otherwise reject it
--2) The stock should be greater than order quantity when order is upadate otherwise tell them that the stock is not available.
--3) The stock shouold be deducted when new order is made.
--4) The stock should be updated accordinly when order it updated.
--5) The stock should be updated when order is delted and allow order deletion within 2 days only.
--6) The product should be deleted from product table as it is being discountinued then it should be deleted from stock table 




USE INVENTORY;



--combining 1 and 3 trigger on order creation 
DROP TRIGGER TRIGG_INS_ORD;


CREATE TRIGGER TRIGG_INS_ORD
ON ORDERS
FOR INSERT
AS
BEGIN
		SET NOCOUNT ON;

		DECLARE @QR AS INT, @QS AS INT;
		
		SET @QR= (SELECT OQTY FROM INSERTED);
		SET @QS= (SELECT SQTY FROM STOCK WHERE PID=(SELECT PID FROM INSERTED));

		IF @QS>=@QR
			BEGIN 
				UPDATE STOCK SET SQTY=SQTY - @QR
				WHERE PID= (SELECT PID FROM INSERTED);
				COMMIT;
				PRINT('ORDER ACCEPTED !!!');
			END;
		ELSE 
			BEGIN
				ROLLBACK;
				PRINT('SORRY, YOUR ORDER CANNOT BE PLACED AS THE STOCK IS INSUFFICIENT');
			END;
END;

SELECT * FROM STOCK;
SELECT * FROM ORDERS;

ADDORDER 'C0003','P0003',5;

-- trigger on order deletion as described in point number 5
DROP TRIGGER TRIGG_DEL_ORD;

CREATE TRIGGER TRIGG_DEL_ORD
ON ORDERS
FOR DELETE
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE @ODATE AS DATE;

	SET @ODATE=(SELECT ODATE FROM DELETED);

	IF CAST(DATEDIFF(DAY,@ODATE,CONVERT(DATE,GETDATE()))AS INT)<=2
		BEGIN
			UPDATE STOCK SET SQTY= SQTY+ (SELECT OQTY FROM DELETED)
			WHERE PID =(SELECT PID FROM DELETED);

			COMMIT;
			PRINT('YOUR ORDER HAS BEEN SUCCESSFULLY DELETED')
		END;
	ELSE 
		BEGIN
			ROLLBACK;
			PRINT('YOUR ORDER CANNOT BE DELETED AS YOU HAVE PASSED THE 2DAYS PERIOD AFTER ORDER PLACEMENT')
		END;

END;

DELETE FROM ORDERS WHERE OID='O0009';
DELETE FROM ORDERS WHERE OID='O0010';


--combining 2 and 4 trigger on order UPDATION WITH TIME LIMIT OF 2 DAYS FROM ORDER CREATION

CREATE TRIGGER TRIGG_UPD_ORD
ON ORDERS
FOR UPDATE
AS
BEGIN
		SET NOCOUNT ON;

		DECLARE @OQ AS INT, @NQ AS INT,@SQ AS INT,@DIFFQ AS INT;
		
		SET @NQ= (SELECT OQTY FROM INSERTED);
		SET @OQ= (SELECT OQTY FROM DELETED);
		SET @SQ= (SELECT SQTY FROM STOCK WHERE PID=(SELECT PID FROM INSERTED));
		SET @DIFFQ= @NQ-@OQ;

		DECLARE @ODATE AS DATE;

		SET @ODATE=(SELECT ODATE FROM DELETED);

		IF CAST(DATEDIFF(DAY,@ODATE,CONVERT(DATE,GETDATE()))AS INT)<=2
			BEGIN 
				IF @SQ>@DIFFQ
					BEGIN 
						UPDATE STOCK SET SQTY=SQTY + @OQ - @NQ
						WHERE PID= (SELECT PID FROM INSERTED);
						COMMIT;
						PRINT('ORDER UPDATED SUCCESSFULLY !!!');
					END;
				ELSE 
					BEGIN
						ROLLBACK;
						PRINT('SORRY, YOUR ORDER CANNOT BE UPDATED AS THE STOCK IS INSUFFICIENT');
					END;
			END;
		ELSE 
			BEGIN 
				ROLLBACK;
				PRINT('SORRY!! YOUR ORDER CANNOT BE UPDATED AS YOU HAVE PASSED THE 2DAYS PERIOD AFTER ORDER PLACEMENT!! PLEASE PLACE A NEW ORDER!!');
			END;
END;

SELECT * FROM STOCK;
SELECT * FROM ORDERS;

UPDATE ORDERS SET OQTY=5 WHERE OID='O0003';
UPDATE ORDERS SET OQTY=25 WHERE OID='O0007';
UPDATE ORDERS SET OQTY=10 WHERE OID='O0007';
UPDATE ORDERS SET OQTY=1 WHERE OID='O0007';

-- GENERATED THE STOCK FIRST FOR THE BELOW PRODUCTS FOR TESTING
--INSERT INTO STOCK 
--VALUES ('P0016',20,10,5);
--INSERT INTO STOCK
--VALUES ('P0017',20,10,5);

-- TRIGGER ACCORDING TO POINT NO 6.. WHILE DISCONTINUING A PRODUCT ITS SHOULD BE REMOVE FROM STOCK TABLE

CREATE TRIGGER TR_DEL_PRO
ON PRODUCT
FOR DELETE 
AS
BEGIN
		SET NOCOUNT ON;
		DELETE FROM STOCK WHERE PID = (SELECT PID FROM DELETED);
END;


--lets create some procedures for reporting purpose

--1) DAILY REPORT SHOWING ALL THE TRANSACTION DONE WITHIN THE DATE. CREATE A PROCEDURE DAILY_REPORT.
--2) GIVEN SUPPLIER ID CREATE SUPPLIER REPORT WHICH WILL SHOW ALL THE PRODUCTS SUPPLIED BY THAT SUPPLIER. CREATE A PROCEDURE SUPPLIER_REPORT.
--3) GIVEN CUSTOMER ID CREATE CUSTOMER LEDGER WHICH WILL SHOW ALL CID,OID,PID,PDESC,OQTY,ODATE,PRICE,TOTAL AMOUNT OF ORDERS ETC SINCE THE BEGINNING.
--	CREATE PROCEDURE CUST_LEDG FOR THIS.
--4) GIVEN TWO DATES START AND END CREATE SALES REPORT WHICH WILL SHOW ALL THE TRANSACTIONS DONE IN THAT PERIOD. CREATE SALES_REPORT


-- WE MAKE A DAILY REPORT WITH COLUMNS- OID,CID,CNAME,CITY,PID,PDESC,OQTY,SQTY WHERE ODATE IS TODAY
--LETS ADD SOME ORDERS TODAY;

ADDORDER 'C0003','P0003',1;
ADDORDER 'C0005','P0015',1;
ADDORDER 'C0008','P0011',1;
SELECT * FROM ORDERS;
SELECT * FROM STOCK;

CREATE PROCEDURE DAILY_REPORT
AS 
BEGIN
	SELECT O.OID,C.CID,C.CNAME,C.CITY,P.PID,P.PDESC,O.OQTY,S.SQTY
	FROM ORDERS O LEFT JOIN CUST C ON O.CID=C.CID
	LEFT JOIN PRODUCT P ON O.PID=P.PID
	LEFT JOIN STOCK S ON O.PID=S.PID
	WHERE O.ODATE=CONVERT(DATE,GETDATE());
END;

DAILY_REPORT;

-- WE MAKE SUPPLIER REPORT WITH COLUMNS- PID,PDESC,PRICE,CATEGORY,SQTY GIVEN THE SID

CREATE PROCEDURE SUPPLIER_REPORT @SID AS CHAR(5)
AS 
BEGIN
	SELECT P.PID,P.PDESC,P.PRICE,P.CATEGORY,S.SQTY
	FROM PRODUCT P 
	LEFT JOIN STOCK S ON P.PID=S.PID
	WHERE P.SID=@SID;
END;

SUPPLIER_REPORT 'S0005';
SUPPLIER_REPORT 'S0002';
SUPPLIER_REPORT 'S0004';
SUPPLIER_REPORT 'S0008';

SELECT * FROM PRODUCT;


-- WE MAKE CUST_LEDG WITH COLUMNS-OID,PID,PDESC,OQTY,ODATE,PRICE,TOTAL AMOUNT OF ORDERS GIVEN CID

CREATE PROCEDURE CUST_LEDG @CID AS CHAR(5)
AS 
BEGIN
	SELECT O.OID,O.ODATE,P.PID,P.PDESC,O.OQTY,P.PRICE,O.OQTY*P.PRICE AS 'ORDER_AMOUNT'
	FROM ORDERS O LEFT JOIN PRODUCT P ON O.PID=P.PID
	WHERE O.CID=@CID;
END;

SELECT * FROM ORDERS;
CUST_LEDG 'C0005';
CUST_LEDG 'C0011';
CUST_LEDG 'C0002';


-- WE MAKE SALES_REPORT WITH COLUMNS-OID,PID,PDESC,OQTY,ODATE,PRICE,TOTAL AMOUNT-GIVEN THE TWO DATES OF ODATE

CREATE PROCEDURE SALES_REPORT @ST_DATE AS DATE,@END_DATE AS DATE
AS 
BEGIN
		SELECT O.OID,O.ODATE,P.PID,P.PDESC,O.OQTY,P.PRICE,O.OQTY*P.PRICE AS 'ORDER_AMOUNT'
		FROM ORDERS O LEFT JOIN PRODUCT P ON O.PID=P.PID
		WHERE O.ODATE>=@ST_DATE AND O.ODATE<=@END_DATE; 
END;

SALES_REPORT '01-SEP-2018','15-NOV-2020';
SALES_REPORT '17-NOV-2020','18-NOV-2020';

SELECT * FROM ORDERS;